{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#welcome-to-jamess-course-notes","title":"Welcome to James's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Rust Setup","text":"<ul> <li>Primary author: James Masterson</li> <li>Reviewer: Ram Ariga</li> </ul> <p>Hello Readers! The following tutorial is a guide to create a simple project in the programming language Rust. Follow the steps as listed and you'll be on your way to making a Rust program in no time!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites:","text":"<ol> <li>Programming experience</li> <li>Git installed: can install it here</li> <li>Have VSCode installed</li> <li>A command terminal</li> <li>A GitHub account</li> <li>Docker installed</li> </ol>"},{"location":"tutorials/rust-setup/#step-1-setting-up-your-project","title":"Step 1. Setting up your project","text":"<p>Open your command terminal and <code>cd</code> to your home directory. Then make a new directory and cd into it.</p> <p>Note</p> <p>This should be your project root folder  </p> <p><pre><code>cd  \nmkdir &lt;directory name&gt;  \ncd &lt;directory name&gt; \n</code></pre> Setup GitHub: Create a git repository with this command: <pre><code>  git init\n</code></pre></p> <p>Then create a GitHub repository on the GitHub website by going to the repositories page and clicking the <code>new</code> button. Make sure to NOT initialize with a .gitignore or license or README.md Make sure to then link your local git repository to the remote repository in your GitHub acccount with this subcommand: <pre><code>git remote add origin &lt;link to repository&gt;.git  \n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-create-your-dev-container","title":"Step 2. Create your dev container","text":"<p>Install the Dev Containers extension on VSCode Open up your project folder in VSCode Create a new directory called <code>.devcontainer</code> and a file inside of it called <code>devcontainer.json</code> The <code>devcontainer.json</code> file will contain configurations for the container. In this case we will have a image and extensions that correlate with the Rust programming language. This file will also install the Rust extension in VSCode. The devcontainer.json file should look something like this: <pre><code>{\n  \"name\": \"&lt;Project Name&gt;\",  \n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",  \n  \"customizations\": {  \n    \"vscode\": {  \n      \"settings\": {},  \n      \"extensions\": [\"rust-lang.rust-analyzer\"]  \n    }  \n  },  \n  \"postCreateCommand\": \"rustc --version\"  \n}  \n</code></pre></p> <p>Warning</p> <p>After you finish your <code>devontainer.json</code> file make sure to save it.</p> <p>Then reopen the project in the container. VSCode should prompt you to do this but if not use <code>Ctrl+Shift+P</code> then type \"Dev Containers: Reopen in Container\" in the search bar then select the option it shows.</p>"},{"location":"tutorials/rust-setup/#step-3-creating-a-rust-hello-comp423-program","title":"Step 3. Creating a Rust \"Hello Comp423\" program","text":"<p>Before starting the next step, make sure you have an up to date version of Rust installed using the <code>rustc --version subcommand</code> Open up a new terminal in VSCode. You will be using this terminal from now on. First use the <code>cargo new</code> subcommand to create a new Rust project. Name it the same name as your project if you'd like for convenience. <pre><code>cargo new hello_comp423  \ncd hello_comp423  \n</code></pre> In your project's <code>src</code> folder, open the <code>main.rs</code> file. Replace its contents with the following:</p> <p>Note</p> <p>Your file should contain the following: rust fn main() {   println!(\"Hello COMP423\"); }  </p>"},{"location":"tutorials/rust-setup/#step-4-run-your-program","title":"Step 4. Run your program!","text":"<p>First use the <code>cargo build</code> subcommand before running your program  </p> <p>Warning</p> <p>make sure your current working directory is the rust program folder  </p> <p>Now that you have your Rust project set up, you can run your program using the cargo run subcommand!</p> <p>Note</p> <p>Type the following in your VSCode terminal:</p> <pre><code>cargo run  \n</code></pre> <p>If you did everything correctly you should see Hello COMP423 displayed in the terminal. Using rustc directly: An alternative way to compile and run the program is to use the rustc command directly. This is similar to using <code>gcc</code> for C programs, where you compile the source code into an executable. This differs from the <code>cargo run</code> subcommand as <code>cargo run</code> handles both compilation and execution in one step, along with managing dependencies. The following terminal commands detail the process:</p> <pre><code>rustc src/main.rs  \n./main  \n</code></pre> <p>Note</p> <p>This should also print Hello COMP423</p> <p>Clean up build artifacts: !!!  warning     Use the cargo clean subcommand to remove the target directory and all compiled artifacts.</p> <p>Congrats on making it to the end! You're officially a Rust programmer!</p>"}]}